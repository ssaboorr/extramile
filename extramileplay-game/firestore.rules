rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==================== Helper Functions ====================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidPlayer() {
      return isAuthenticated() && 
             request.auth.uid != null &&
             request.auth.uid != "";
    }
    
    function isRoomHost(roomId) {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/rooms/$(roomId)).data.hostId == request.auth.uid;
    }
    
    function isRoomMember(roomId) {
      return isAuthenticated() && 
             (exists(/databases/$(database)/documents/rooms/$(roomId)/players/$(request.auth.uid)) ||
              request.auth.uid in get(/databases/$(database)/documents/rooms/$(roomId)).data.playerIds);
    }
    
    function isValidIncrement(field) {
      return request.resource.data[field] > resource.data[field];
    }
    
    // ==================== Players Collection ====================
    
    match /players/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      
      allow create: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       request.resource.data.uid == userId &&
                       request.resource.data.createdAt != null &&
                       request.resource.data.lastLoginAt != null;
      
      allow update: if isAuthenticated() && isOwner(userId);
      
      allow delete: if false;
    }
    
    // ==================== Challenges Collection (Read-only) ====================
    
    match /challenges/{challengeId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }
    
    // ==================== Game Templates Collection (Read-only) ====================
    
    match /gameTemplates/{templateId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }
    
    // ==================== Settings Collection (Read-only) ====================
    
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }
    
    // ==================== Rooms Collection ====================
    
    match /rooms/{roomId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                       request.resource.data.hostId == request.auth.uid &&
                       request.resource.data.roomId == roomId &&
                       request.resource.data.status == 'waiting' &&
                       request.resource.data.currentPlayers >= 0 &&
                       request.resource.data.maxPlayers > 0 &&
                       request.resource.data.playerIds is list &&
                       request.resource.data.playerIds.size() == 1 &&
                       request.auth.uid in request.resource.data.playerIds;
      
      allow update: if isAuthenticated() && (
        // Host can update any field
        resource.data.hostId == request.auth.uid ||
        // Players can add themselves to playerIds when joining
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentPlayers', 'playerIds']) &&
         isValidIncrement('currentPlayers') &&
         request.auth.uid in request.resource.data.playerIds &&
         !(request.auth.uid in resource.data.playerIds) &&
         request.resource.data.playerIds.size() == resource.data.playerIds.size() + 1) ||
        // Players can remove themselves from playerIds when leaving
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentPlayers', 'playerIds']) &&
         request.resource.data.currentPlayers == resource.data.currentPlayers - 1 &&
         !(request.auth.uid in request.resource.data.playerIds) &&
         request.auth.uid in resource.data.playerIds &&
         request.resource.data.playerIds.size() == resource.data.playerIds.size() - 1)
      );
      
      allow delete: if isAuthenticated() && resource.data.hostId == request.auth.uid;
      
      // ==================== Room Players Subcollection ====================
      
      match /players/{playerId} {
        allow read: if isAuthenticated();
        
        allow create: if isAuthenticated() && 
                         playerId == request.auth.uid &&
                         request.resource.data.playerId == request.auth.uid &&
                         request.resource.data.joinedAt != null &&
                         request.resource.data.totalScore == 0;
        
        allow update: if isAuthenticated() && (
          playerId == request.auth.uid ||
          isRoomHost(roomId)
        );
        
        allow delete: if isAuthenticated() && (
          playerId == request.auth.uid ||
          isRoomHost(roomId)
        );
      }
      
      // ==================== Room Challenges Subcollection ====================
      
      match /challenges/{challengeId} {
        allow read: if isAuthenticated() && isRoomMember(roomId);
        allow create: if false;
        allow update: if isAuthenticated() && isRoomHost(roomId);
        allow delete: if false;
      }
      
      // ==================== Room Submissions Subcollection ====================
      
      match /submissions/{submissionId} {
        allow read: if isAuthenticated() && isRoomMember(roomId);
        
        allow create: if isAuthenticated() && 
                         request.resource.data.playerId == request.auth.uid &&
                         request.resource.data.roomId == roomId &&
                         request.resource.data.submittedAt != null;
        
        allow update: if false;
        allow delete: if false;
      }
      
      // ==================== Room Leaderboard Subcollection ====================
      
      match /leaderboard/{playerId} {
        allow read: if isAuthenticated() && isRoomMember(roomId);
        allow create, update: if false;
        allow delete: if false;
      }
      
      // ==================== Other Room Subcollections ====================
      
      match /{subcollection}/{document} {
        allow read: if isAuthenticated() && isRoomMember(roomId);
        allow write: if isAuthenticated() && isRoomHost(roomId);
      }
    }
    
    // ==================== Games/Match History Collection ====================
    
    match /games/{gameId} {
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.playerIds ||
        resource.data.hostId == request.auth.uid
      );
      
      allow create: if isAuthenticated() && 
                       request.auth.uid in request.resource.data.playerIds;
      
      allow update: if isAuthenticated() && 
                       resource.data.hostId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                        resource.data.hostId == request.auth.uid;
    }
    
    // ==================== Achievements Collection ====================
    
    match /achievements/{achievementId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }
    
    // ==================== Player Achievements Subcollection ====================
    
    match /players/{userId}/achievements/{achievementId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if false;
    }
    
    // ==================== Global Leaderboards Collection ====================
    
    match /leaderboards/{leaderboardId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }
    
    // ==================== Player Statistics Collection ====================
    
    match /playerStats/{userId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                       request.auth.uid == userId;
      
      allow update: if false;
      allow delete: if false;
    }
    
    // ==================== Admin Collection (Optional) ====================
    
    match /admin/{document} {
      allow read, write: if false;
    }
    
    // ==================== Deny All Other Access ====================
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
